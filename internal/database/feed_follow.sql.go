// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feed_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedfollow = `-- name: CreateFeedfollow :one
insert into feed_follow(feed_follow_id, created_at, updated_at, user_id, feed_id)
values($1, $2, $3, $4, $5)
RETURNING feed_follow_id, created_at, updated_at, user_id, feed_id
`

type CreateFeedfollowParams struct {
	FeedFollowID uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UserID       uuid.UUID
	FeedID       uuid.UUID
}

func (q *Queries) CreateFeedfollow(ctx context.Context, arg CreateFeedfollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedfollow,
		arg.FeedFollowID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedFollow
	err := row.Scan(
		&i.FeedFollowID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFeedfollow = `-- name: DeleteFeedfollow :exec
Delete from feed_follow 
where feed_follow_id = $1
`

func (q *Queries) DeleteFeedfollow(ctx context.Context, feedFollowID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeedfollow, feedFollowID)
	return err
}

const userFeedFollows = `-- name: UserFeedFollows :many
select feed_follow_id, created_at, updated_at, user_id, feed_id from feed_follow where user_id = $1
`

func (q *Queries) UserFeedFollows(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, userFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.FeedFollowID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
